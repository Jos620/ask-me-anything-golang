// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package pgdb

import (
	"context"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages ("room_id", "message")
    VALUES ($1, $2)
RETURNING
    "id", "room_id", "message", "reaction_count", "answered"
`

type CreateMessageParams struct {
	RoomID  uuid.UUID
	Message string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.RoomID, arg.Message)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMessage, id)
	return err
}

const getAllMessages = `-- name: GetAllMessages :many
SELECT
    "id",
    "room_id",
    "message",
    "reaction_count",
    "answered"
FROM
    messages
`

func (q *Queries) GetAllMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, getAllMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Message,
			&i.ReactionCount,
			&i.Answered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT
    "id",
    "room_id",
    "message",
    "reaction_count",
    "answered"
FROM
    messages
WHERE
    id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
	)
	return i, err
}

const getMessagesByRoomID = `-- name: GetMessagesByRoomID :many
SELECT
    "id",
    "room_id",
    "message",
    "reaction_count",
    "answered"
FROM
    messages
WHERE
    room_id = $1
`

func (q *Queries) GetMessagesByRoomID(ctx context.Context, roomID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Message,
			&i.ReactionCount,
			&i.Answered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markMessageAsAnswered = `-- name: MarkMessageAsAnswered :one
UPDATE
    messages
SET
    "answered" = TRUE
WHERE
    id = $1
RETURNING
    "id",
    "room_id",
    "message",
    "reaction_count",
    "answered"
`

func (q *Queries) MarkMessageAsAnswered(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, markMessageAsAnswered, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
	)
	return i, err
}

const reactToMessage = `-- name: ReactToMessage :one
UPDATE
    messages
SET
    "reaction_count" = "reaction_count" + 1
WHERE
    id = $1
RETURNING
    "id",
    "room_id",
    "message",
    "reaction_count",
    "answered"
`

func (q *Queries) ReactToMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, reactToMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
	)
	return i, err
}

const removeReactionFromMessage = `-- name: RemoveReactionFromMessage :one
UPDATE
    messages
SET
    "reaction_count" = "reaction_count" - 1
WHERE
    id = $1
RETURNING
    "id",
    "room_id",
    "message",
    "reaction_count",
    "answered"
`

func (q *Queries) RemoveReactionFromMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, removeReactionFromMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
	)
	return i, err
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE
    messages
SET
    "message" = $2,
    "reaction_count" = $3,
    "answered" = $4
WHERE
    id = $1
RETURNING
    "id",
    "room_id",
    "message",
    "reaction_count",
    "answered"
`

type UpdateMessageParams struct {
	ID            uuid.UUID
	Message       string
	ReactionCount int64
	Answered      bool
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, updateMessage,
		arg.ID,
		arg.Message,
		arg.ReactionCount,
		arg.Answered,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
	)
	return i, err
}
