// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms.sql

package pgdb

import (
	"context"

	"github.com/google/uuid"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms ("theme")
    VALUES ($1)
RETURNING
    "id", "theme"
`

func (q *Queries) CreateRoom(ctx context.Context, theme string) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, theme)
	var i Room
	err := row.Scan(&i.ID, &i.Theme)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms
WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRoom, id)
	return err
}

const getRoomByID = `-- name: GetRoomByID :one
SELECT
    "id",
    "theme"
FROM
    rooms
WHERE
    id = $1
`

func (q *Queries) GetRoomByID(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByID, id)
	var i Room
	err := row.Scan(&i.ID, &i.Theme)
	return i, err
}

const getRooms = `-- name: GetRooms :many
SELECT
    "id",
    "theme"
FROM
    rooms
`

func (q *Queries) GetRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Theme); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE
    rooms
SET
    "theme" = $2
WHERE
    id = $1
RETURNING
    "id",
    "theme"
`

type UpdateRoomParams struct {
	ID    uuid.UUID
	Theme string
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoom, arg.ID, arg.Theme)
	var i Room
	err := row.Scan(&i.ID, &i.Theme)
	return i, err
}
